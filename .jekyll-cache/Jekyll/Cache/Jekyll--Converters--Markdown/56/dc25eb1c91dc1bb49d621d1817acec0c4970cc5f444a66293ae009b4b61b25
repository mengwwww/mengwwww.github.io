I"<p><strong>分布式版本控制系统</strong></p>

<p>于是分布式版本控制系统（DVCS）面世了。再这类系统中，像Git，Mercurial,Bazaar以及Darcs等，客户端并不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来，包括完整的历史记录。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的克隆操作，实际都是一次对代码仓库的完整备份。</p>

<p>更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。 你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的</p>

<p><strong>基本的Git工作流程如下：</strong>
<strong>1.在工作区中修改文件
2.将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。
3.提交更新，找到暂存区的文件，将快照永久性存储到Git目录。</strong></p>

<p>如果 Git 目录中保存着特定版本的文件，就属于 已提交 状态。 如果文件已修改并放入暂存区，就属于 已暂存 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 已修改 状态</p>

<p>本地Git操作三部曲是 “修改-添加-提交”，即先要在本地仓库进行添加，删除或编辑等修改，然后将本地所做的修改添加至暂存区。添加至暂存区的这些本地修改，并未提交到本地仓库，需要执行提交命令才能将暂存区中的修改，添加到本地仓库。</p>

<p>请记住，你工作目录下的每一个文件都不外乎这两种状态<strong>：已跟踪 或 未跟踪</strong>。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。
工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们。
编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改，如此反复。
<img src="/images/posts/Git/image.png" alt="" /></p>
:ET